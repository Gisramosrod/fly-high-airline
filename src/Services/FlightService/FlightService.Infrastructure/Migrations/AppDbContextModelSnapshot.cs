// <auto-generated />
using System;
using System.Collections.Generic;
using FlightService.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightService.Domain.Entities.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Airports", (string)null);
                });

            modelBuilder.Entity("FlightService.Domain.Entities.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArrivalDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOfUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartureDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("PlaneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("Number", "FlightService.Domain.Entities.Flight.Number#FlightNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ArrivalDetailId")
                        .IsUnique();

                    b.HasIndex("DepartureDetailId")
                        .IsUnique();

                    b.HasIndex("PlaneId");

                    b.ToTable("Flights", (string)null);
                });

            modelBuilder.Entity("FlightService.Domain.Entities.FlightDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.ToTable("FlightDetails", (string)null);
                });

            modelBuilder.Entity("FlightService.Domain.Entities.Plane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Planes", (string)null);
                });

            modelBuilder.Entity("FlightService.Domain.Entities.PlaneService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlaneServices");
                });

            modelBuilder.Entity("FlightService.Domain.Entities.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeatClass")
                        .HasColumnType("int");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PlaneId");

                    b.ToTable("Seats", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PlanePlaneService", b =>
                {
                    b.Property<Guid>("PlaneServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlaneServicesId", "PlanesId");

                    b.HasIndex("PlanesId");

                    b.ToTable("PlanePlaneService");
                });

            modelBuilder.Entity("FlightService.Domain.Entities.FlightSeat", b =>
                {
                    b.HasBaseType("FlightService.Domain.Entities.Seat");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightSeats", (string)null);
                });

            modelBuilder.Entity("FlightService.Domain.Entities.Flight", b =>
                {
                    b.HasOne("FlightService.Domain.Entities.FlightDetail", "ArrivalDetail")
                        .WithOne()
                        .HasForeignKey("FlightService.Domain.Entities.Flight", "ArrivalDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightService.Domain.Entities.FlightDetail", "DepartureDetail")
                        .WithOne()
                        .HasForeignKey("FlightService.Domain.Entities.Flight", "DepartureDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightService.Domain.Entities.Plane", "Plane")
                        .WithMany()
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArrivalDetail");

                    b.Navigation("DepartureDetail");

                    b.Navigation("Plane");
                });

            modelBuilder.Entity("FlightService.Domain.Entities.FlightDetail", b =>
                {
                    b.HasOne("FlightService.Domain.Entities.Airport", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("FlightService.Domain.Entities.Seat", b =>
                {
                    b.HasOne("FlightService.Domain.Entities.Plane", null)
                        .WithMany("Seats")
                        .HasForeignKey("PlaneId");
                });

            modelBuilder.Entity("PlanePlaneService", b =>
                {
                    b.HasOne("FlightService.Domain.Entities.PlaneService", null)
                        .WithMany()
                        .HasForeignKey("PlaneServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightService.Domain.Entities.Plane", null)
                        .WithMany()
                        .HasForeignKey("PlanesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightService.Domain.Entities.FlightSeat", b =>
                {
                    b.HasOne("FlightService.Domain.Entities.Flight", null)
                        .WithMany("FlightSeats")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightService.Domain.Entities.Seat", null)
                        .WithOne()
                        .HasForeignKey("FlightService.Domain.Entities.FlightSeat", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightService.Domain.Entities.Flight", b =>
                {
                    b.Navigation("FlightSeats");
                });

            modelBuilder.Entity("FlightService.Domain.Entities.Plane", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
